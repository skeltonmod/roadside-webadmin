generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CarTransmission {
  Automatic
  Manual
}

model User {
  id           String      @id
  email        String      @unique
  username     String?
  key          Key[]
  auth_session Session[]
  details      UserDetail?
  cars         Cars[]
  shops        Shops[]

  // Add these fields for relations
  requestsAsUser     Request[] @relation("UserRequests")
  requestsAsMechanic Request[] @relation("MechanicRequests")

  @@map("users")
}

model Session {
  id             String @id
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("users_session")
}

model UserDetail {
  id      String  @id @default(uuid())
  role    String
  details Json
  user_id String  @unique
  user    User    @relation(fields: [user_id], references: [id])
  image   String? @db.LongText

  @@map("user_details")
}

model Cars {
  id           String          @id @default(uuid())
  user_id      String          @unique
  user         User            @relation(fields: [user_id], references: [id])
  brand        String
  model        String
  color        String
  year         String
  fuel         String
  transmission CarTransmission
  image        String?         @db.LongText
  request      Request?

  @@map("cars")
}

model Shops {
  id       String  @id @default(uuid())
  name     String
  phone    String?
  address  String?
  location Json?
  details  Json?
  user_id  String  @unique
  user     User    @relation(fields: [user_id], references: [id])

  @@map("shops")
}

model Request {
  id             String   @id @default(uuid())
  car_id         String   @unique
  car            Cars     @relation(fields: [car_id], references: [id])
  mechanic_id    String
  user_id        String
  description    String?
  status         String   @default("pending")
  owner_rating   Int?
  mechanic_rating Int?

  // Relationship to User model
  user         User @relation(name: "UserRequests", fields: [user_id], references: [id])
  mechanic     User @relation(name: "MechanicRequests", fields: [mechanic_id], references: [id])

  @@map("requests")
}

model Key {
  id              String  @id
  hashed_password String?
  user_id         String
  user            User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@map("users_key")
}
